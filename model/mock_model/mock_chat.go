// Code generated by MockGen. DO NOT EDIT.
// Source: chat.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	model "github.com/ari1021/websocket/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIChat is a mock of IChat interface
type MockIChat struct {
	ctrl     *gomock.Controller
	recorder *MockIChatMockRecorder
}

// MockIChatMockRecorder is the mock recorder for MockIChat
type MockIChatMockRecorder struct {
	mock *MockIChat
}

// NewMockIChat creates a new mock instance
func NewMockIChat(ctrl *gomock.Controller) *MockIChat {
	mock := &MockIChat{ctrl: ctrl}
	mock.recorder = &MockIChatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIChat) EXPECT() *MockIChatMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockIChat) Find(roomID, limit, offset int) (*model.Chats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", roomID, limit, offset)
	ret0, _ := ret[0].(*model.Chats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockIChatMockRecorder) Find(roomID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIChat)(nil).Find), roomID, limit, offset)
}

// Create mocks base method
func (m *MockIChat) Create(message string, roomID int, userName string) (*model.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", message, roomID, userName)
	ret0, _ := ret[0].(*model.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockIChatMockRecorder) Create(message, roomID, userName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIChat)(nil).Create), message, roomID, userName)
}
